# {{ pillar['message_do_not_modify'] }}
# This file contains the checks for the low-level infrastructure components
# supported by salt.

{% for user in pillar['shinken']['users'] %}
define contact {
    contact_name {{ user }}
    email {{ pillar['shinken']['users'][user]['email'] }}
    can_submit_commands 1
    password {{ pillar['shinken']['users'][user]['password'] }}
    is_admin 1
    host_notification_period 24x7
    host_notification_options d,u,r,f,s
    host_notification_commands notify-host-by-email
    host_notifications_enabled 1
    service_notification_period 24x7
    service_notification_options c,w,r,u
    service_notification_commands notify-service-by-email
    service_notifications_enabled 1
}
{% endfor %}

define contactgroup {
    contactgroup_name admins
    alias admins
    members {% for user in pillar['shinken']['users'] %}{{ user }}{% if not loop.last %},{% endif %}{% endfor %}
    # host notifications can be sent anytime
    host_notification_period 24x7
    # send notifications for all host states, flapping events (f), and scheduled
    # downtime events (s)
    host_notification_options d,u,r,f,s
    # send host notifications via email
    host_notification_commands notify-host-by-email
    host_notifications_enabled 1

    # service notifications can be sent anytime
    service_notification_period 24x7
    service_notification_options c,w,r,u
    # send service notifications via email
    service_notification_commands notify-service-by-email
    service_notifications_enabled 1
}

define command {
    command_name notify-host-by-email
    command_line /usr/bin/printf "%b" "Shinken Notification\n\nType:$NOTIFICATIONTYPE$\nHost: $HOSTNAME$\nState: $HOSTSTATE$\nAddress: $HOSTADDRESS$\nInfo: $HOSTOUTPUT$\nWhen: $LONGDATETIME$" | mail -s "Host $HOSTSTATE$ alert for $HOSTNAME$!" $CONTACTEMAIL$

# send email for a service
define command {
    command_name notify-service-by-email
    command_line /usr/bin/printf "%b" "Shinken Notification\n\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\nWhen: $LONGDATETIME$\n\nAdditional Info : $SERVICEOUTPUT$" | mail -s "** $NOTIFICATIONTYPE$ alert - $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **" $CONTACTEMAIL$
}

define command {
    command_name check_nrpe
    command_line /usr/lib/nagios/plugins/check_nrpe -H $HOSTADDRESS$ -t 9 -u -c $ARG1$
}

define command {
   command_name check_ping
   command_line /usr/lib/nagios/plugins/check_ping -H $HOSTADDRESS$ -w 3000,100% -c 5000,100% -p 1
}

define command {
    command_name check_tcp
    command_line /usr/lib/nagios/plugins/check_tcp -H $HOSTADDRESS$ -p $ARG1$
}

define command {
    command_name check_ssh
    command_line /usr/lib/nagios/plugins/check_ssh -4 -p 22022 $HOSTADDRESS$
}

define timeperiod {
    timeperiod_name 24x7
    alias 24_Hours_A_Day,_7_Days_A_Week
{% for day in ('sun', 'mon', 'tues', 'wednes', 'thurs', 'fri', 'satur') %}
    {{ day }}day 00:00-24:00
{% endfor %}
}

define service {
    name salt-service
    register 0

    # Active service checks are enabled
    active_checks_enabled 1
    # Passive service checks are enabled/accepted
    passive_checks_enabled 1
    # Active service checks should be parallelized (disabling this can lead
    # to major performance problems)
    parallelize_check 1
    # We should obsess over this service (if necessary)
    obsess_over_service 1
    # Default is to NOT check service 'freshness'
    check_freshness 1
    freshness_threshold 3600
    # Service notifications are enabled
    notifications_enabled 1
    event_handler_enabled 0
    # Service event handler is enabled
{#    event_handler super_event_kill_everyone!DIE#}
    # Flap detection is enabled
    flap_detection_enabled 1
    # Failure prediction is enabled
    failure_prediction_enabled 1
    # Process performance data
    process_perf_data 1
    # Retain status information across program restarts
    retain_status_information 1
    # Retain non-status information across program restarts
    retain_nonstatus_information 1
    # The service is not volatile
    is_volatile 0
    # The service can be checked at any time of the day
    check_period 24x7
    # Re-check the service up to 3 times in order to determine its final (hard)
    # state
    max_check_attempts 2
    check_interval 2
    # Re-check the service every two minutes until a hard state can be
    # determined
    retry_interval 5
    contact_groups admins
    # Send notifications about warning, unknown, critical, and recovery events
    notification_options w,u,c,r
    # Re-notify about service problems every hour
    notification_interval 0
    notification_period 24x7
    _httpstink NO
}

{% for host in pillar['shinken']['ip_addresses'] %}
define host {
    host_name {{ host }}
    address {{ pillar['shinken']['ip_addresses'][host] }}
    alias {{ host }}
    contact_groups admins
    notification_interval 0
    first_notification_delay 0
    notification_options d,u,r
    notification_period 24x7
    notifications_enabled 1
    active_checks_enabled 1
    check_period 24x7
    check_interval 2
    retry_interval 1
    max_check_attempts 2
    check_command check_ping
    event_handler_enabled 0
    flap_detection_enabled 1
    process_perf_data 1
    retain_status_information 1
    retain_nonstatus_information 1
    business_impact 5
    poller_tag all
}
{% endfor %}

{#
 # the following services need to be checked on ALL hosts
 #}
define service {
    host_name {% for host in pillar['shinken']['ip_addresses'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description SSH
    check_command check_ssh
    use salt-service
}

define service {
    host_name {% for host in pillar['shinken']['ip_addresses'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description SSH Port
    check_command check_tcp!22022
    use salt-service
}

define service {
    host_name {% for host in pillar['shinken']['ip_addresses'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description NRPE
    check_command check_tcp!5666
    use salt-service
}

{% for service in ('loopback', 'memory', 'cron', 'diamond', 'syslogd', 'klogd', 'salt_minion', 'ssh', 'statsd', 'users', 'load', 'all_disks', 'zombie_procs', 'total_procs') %}
define service {
    host_name {% for host in pillar['shinken']['ip_addresses'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description Infra-{{ service }}
    check_command check_nrpe!check_{{ service }}
    use salt-service
}
{% endfor %}

{#
 # check for all web servers
 #}
{% for service in ('memcached', 'nginx_master', 'nginx_worker', 'nginx_status', 'uwsgi', 'postgresql_server', 'postgresql_port', 'postgresql_diamond') %}
define service {
    host_name {% for host in pillar['shinken']['web_servers'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description WebServer-{{ service }}
    check_command check_nrpe!check_{{ service }}
    use salt-service
}
{% endfor %}

define service {
    host_name {% for host in pillar['shinken']['web_servers'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description http-port
    check_command check_tcp!80
    use salt-service
}

{%- for host in pillar['shinken']['web_servers'] -%}
    {%- for deployment in pillar['shinken']['web_servers'][host] -%}
        {%- for service in ('master', 'worker', 'http') %}
define service {
    host_name {{ host }}
    service_description Web-{{ deployment }}-{{ service }}
    check_command check_nrpe!check_{{ deployment }}_{{ service }}
    use salt-service
}
        {% endfor %}
define service {
    host_name {{ host }}
    service_description PostgreSQL-{{ deployment }}
    check_command check_nrpe!check_postgresql_{{ deployment }}
    use salt-service
}
    {%- endfor -%}
{%- endfor %}

{#
 # elastic search checks
 #}
{%- for cluster in ('', '_cluster', '_http') %}
define service {
    host_name {% for host in pillar['shinken']['elasticsearch'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description elasticsearch{{ cluster }}
    check_command check_nrpe!check_elasticsearch{{ cluster }}
    use salt-service
}
{% endfor %}

{% for port in (9200, 9300) %}
define service {
    host_name {% for host in pillar['shinken']['elasticsearch'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description elasticsearch-{{ port }}
    check_command check_tcp!{{ port }}
    use salt-service
}
{% endfor %}

{#
 # carbon
 #}
{% for instance in pillar['shinken']['carbon']['instances'] %}
define service {
    host_name {% for host in pillar['shinken']['carbon']['instances'][instance] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description carbon-{{ instance }}
    check_command check_nrpe!check_carbon_{{ instance }}
    use salt-service
}
{% endfor %}

{% for port in (2003, 2004) %}
define service {
    host_name {% for host in pillar['shinken']['carbon']['hosts'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description carbon-port-{{ port }}
    check_command check_tcp!{{ port }}
    use salt-service
}
{% endfor %}

{#
 # rabbitmq
 #}
{%- for service in ('', '_webui') %}
define service {
    host_name {% for host in pillar['shinken']['rabbitmq'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description {{ service }}
    check_command check_nrpe!check_rabbitmq{{ service }}
    use salt-service
}
{% endfor %}

define service {
    host_name {% for host in pillar['shinken']['rabbitmq'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description rabbitmq-port
    check_command check_tcp!55672
    use salt-service
}

{% for service in ('master', 'worker') %}
define service {
    host_name {% for host in pillar['shinken']['rabbitmq'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description rabbitmq-nginx-{{ service }}
    check_command check_nrpe!check_nginx_{{ service }}
    use salt-service
}
{% endfor %}

{#
 # graylog2
 #}
define service {
    host_name {% for host in pillar['shinken']['graylog2'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description graylog2-server
    check_command check_nrpe!check_graylog2_server
    use salt-service
}

{% for service in ('master', 'worker', 'http') %}
define service {
    host_name {% for host in pillar['shinken']['graylog2'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description Web-graylog2-{{ service }}
    check_command check_nrpe!check_graylog2_{{ service }}
    use salt-service
}
{% endfor %}

{% for service in ('mongodb', 'mongodb_port', 'nginx_master', 'nginx_worker') %}
define service {
    host_name {% for host in pillar['shinken']['graylog2'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description graylog2-{{ service }}
    check_command check_nrpe!check_{{ service }}
    use salt-service
}
{% endfor %}

{#
 # Salt Master
 #}
define service {
    host_name {% for host in pillar['shinken']['salt-master'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description salt-master
    check_command check_nrpe!check_salt_master
    use salt-service
}

{% for port in (4505, 4506) %}
define service {
    host_name {% for host in pillar['shinken']['salt-master'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description salt-master-{{ port }}
    check_command check_tcp!{{ port }}
    use salt-service
}
{% endfor %}

{#
 # Shinken monitoring itself
 #}
{% set listen_port = {
    'arbiter': 7770,
    'broker': 7772,
    'scheduler': 7768,
    'poller': 7771,
    'reactionner': 7769
} %}

{% for service in pillar['shinken']['architecture'] %}
define service {
    host_name {% for host in pillar['shinken']['architecture'][service] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description Shinken-{{ service }}
    check_command check_nrpe!check_shinken_{{ service }}
    use salt-service
}

define service {
    host_name {% for host in pillar['shinken']['architecture'][service] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description Shinken-{{ service }}-port
    check_command check_tcp!{{ listen_port[service] }}
    use salt-service
}

{% if service == 'broker' %}
define service {
    host_name {% for host in pillar['shinken']['architecture'][service] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description Shinken-broker-web
    check_command check_nrpe!check_broker_web
    use salt-service
}
{% endif %}
{% endfor %}

{#
 # Backups
 #}
{% if 'backup' in pillar['shinken'] %}
define service {
    host_name {% for host in pillar['shinken']['backup'] %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description Backups
    check_command check_nrpe!check_backups
    use salt-service
}
{% endif %}
